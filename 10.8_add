//输入一个整数序列，判断是否是有序序列，有序，指序列中的整数从小到大排序或者从大到小排序(相同元素也视为有序)
//int main() {
//	int N = 0;
//	scanf("%d", &N);
//	int arr[50] = { 0 };
//	int i = 0;
//	int p = 0;
//	for (i = 0; i < N; i++)
//	{
//		scanf("%d", &arr[i]);
//	}
//	int flag1 = 0;
//	for (i = 0; i < N - 1; i++)
//	{
//		if (arr[i] > arr[i + 1])
//		{
//			flag1 = 1;
//			p = i+1;
//			break;
//		}
//		else if(arr[i] < arr[i + 1])
//		{
//			flag1 = -1;
//			p = i+1;
//			break;
//		}
//		else
//		{
//			printf("sorted\n");
//			return 0;
//		}
//	}
//	int flag2 = flag1;
//	for (i = p; i < N - 1; i++)
//	{
//		if (flag1 == 1)
//		{
//			if (arr[i] < arr[i + 1])
//			{
//				flag1 = -1;
//				break;
//			}
//		}
//		else {
//			if (arr[i] > arr[i + 1])
//			{
//				flag1 = 1;
//				break;
//			}
//		}
//	}
//	if (flag1 == flag2)
//	{
//		printf("sorted\n");
//	}
//	else {
//		printf("unsorted\n");
//	}
//	return 0;
//}

//方法二:统计相减小于等于0的次数，若为n-1次，则有序
//int main()
//{
//	int N = 0;
//	scanf("%d", &N);
//	int arr[50] = { 0 };
//	int count1 = 0;
//	int count2 = 0;
//	int i = 0;
//	scanf("%d", &arr[0]);
//	for (i = 1; i < N; i++)
//	{
//		scanf("%d", &arr[i]);
//		if (arr[i] >= arr[i - 1])
//		{
//			count1++;
//		}
//		if (arr[i] <= arr[i - 1])
//		{
//			count2++;
//		}
//	}
//	if (count1 == N - 1 || count2 == N - 1)
//	{
//		printf("sorted\n");
//	}
//	else
//	{
//		printf("unsorted\n");
//	}
//}

//a:方法三
//两个flag=0，升序flag1=1，降序flag2=1;如果有序，flag1+flag2 <= 1
 

//输入两个升序排列的序列，将两个序列合并为一个有序序列并输出
//int main()
//{
//	int n, m;
//	scanf("%d %d", &n, &m);
//	int arr1[1001] = { 0 };
//	int arr2[1001] = { 0 };
//	int i = 0;
//	for (i = 0; i < n; i++)
//	{
//		scanf("%d", &arr1[i]);
//	}
//	for (i = 0; i < m; i++)
//	{
//		scanf("%d", &arr2[i]);
//	}
//	int p1 = 0;
//	int p2 = 0;
//	while (p1 < n || p2 < m)//或者任意一个越界后就跳出循环，把未走完的p打印完就行，打印时循环变量不用赋值，循环条件是<m(for(;p2<m;p2++))
//	{
//		if (p2 == m || (arr1[p1] <= arr2[p2]&&p1!=n))
//		{
//			printf("%d ", arr1[p1]);
//			p1++;
//		}
//		else if (p1 == n || (arr1[p1] => arr2[p2]&&p2!=m))
//		{
//			printf("%d ", arr2[p2]);
//			p2++;
//		}
//	}
//	return 0;
//}

//多组输入，一个整数（2~20），表示输出的行数，也表示组成“X”的反斜线和正斜线的长度
//int main() {
//	int a = 0;
//	while (scanf("%d", &a) == 1) {
//		int half = a / 2;
//		int i = 0;
//		for (i = 0; i < half; i++) {
//			int j = 0;
//			for (j = 0; j < i; j++) {
//				printf(" ");
//			}
//			printf("*");
//			for (j = 0; j < a - (i + 1) * 2; j++) {
//				printf(" ");
//			}
//			printf("*\n");
//		}
//		if (a % 2 == 1) {
//			for (i = 0; i < half; i++) {
//				printf(" ");
//			}
//			printf("*\n");
//		}
//		for (i = 0; i < half; i++) {
//			int j = 0;
//			for (j = 0; j < half - i - 1; j++) {
//				printf(" ");
//			}
//			printf("*");
//			if (a % 2 == 1) {
//				for (j = 0; j < 1 + 2 * i; j++) {
//					printf(" ");
//				}
//			}
//			else {
//				for (j = 0; j < 2 * i; j++) {
//					printf(" ");
//				}
//			}
//			printf("*\n");
//		}
//	}
//	return 0;
//}

//方法改进 坐标满足某个函数时打印
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int n = 0;
//	while (scanf("%d", &n) == 1)
//	{
//		for (i = 0; i < n; i++)
//		{
//			for (j = 0; j < n; j++)
//			{
//				if (i == j || i == -j + n - 1)
//				{
//					printf("*");
//				}
//				else {
//					printf(" ");
//				}
//			}
//			printf("\n");
//		}
//	}
//	return 0;
//}


//输入n个成绩，换行输出n个成绩中最高分数和最低分数的差
//int main() {
//	int n = 0;
//	scanf("%d", &n);
//	int score = 0;
//	scanf("%d", &score);
//	int max = score;
//	int min = score;
//	int i = 0;
//	for (i = 0; i < n - 1; i++)
//	{
//		scanf("%d", &score);
//		if (score > max)
//		{
//			max = score;
//		}
//		if (score < min)
//		{
//			min = score;
//		}
//	}
//	printf("%d\n", max - min);
//	return 0;
//}
